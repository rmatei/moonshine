rails_root = "<%= configuration[:deploy_to] + "/current" %>"
workers = <%= configuration[:delayed_job_workers] || 5 %>
name_key = "<%= configuration[:application].to_s + rand(1000000).to_s %>"
 
workers.times do |num|
  God.watch do |w|
    w.name = "#{name_key}-#{num}"
    w.group = 'dj'
    w.interval = 30.seconds
    w.start = "rake jobs:work -f #{rails_root}/Rakefile RAILS_ENV=production"
    w.stop =  "kill -9 `cat /var/run/god/#{w.name}.pid"
 
    w.uid = '<%= configuration[:user] %>'
    w.gid = '<%= configuration[:group] %>'
 
    # restart if memory gets too high
    w.transition(:up, :restart) do |on|
      on.condition(:memory_usage) do |c|
        c.above = 300.megabytes
        c.times = 2
      end
    end
 
    # determine the state on startup
    w.transition(:init, { true => :up, false => :start }) do |on|
      on.condition(:process_running) do |c|
        c.running = true
      end
    end
  
    # determine when process has finished starting
    w.transition([:start, :restart], :up) do |on|
      on.condition(:process_running) do |c|
        c.running = true
        c.interval = 5.seconds
      end
    
      # failsafe
      on.condition(:tries) do |c|
        c.times = 5
        c.transition = :start
        c.interval = 5.seconds
      end
    end
  
    # start if process is not running
    w.transition(:up, :start) do |on|
      on.condition(:process_running) do |c|
        c.running = false
      end
    end
    
  end
end